#!/usr/bin/env python

# Rename and file fonts according to metadata

import os
import re
import shutil
import time
from fontTools import ttLib
import hashlib

# Specify source and destination directories here

source      = r'D:/Fonts/To Sort/'
destination = r'D:/Fonts/Sorted/'

# Font creator TODOs:
# TODO: creator list may need some curation - eg it might be filing people and their business names separately
# TODO: file fonts as '(unrecognised)' or '(unspecified)', depending on whether there's any trademark/copyright info at all, apart from the usual "Converted by ALLTYPE" / "Generated by Fontographer 3.5" suspects
# TODO: look into parsing copyright/trademark strings for author/business names

# Date TODOs:
# TODO: improve the date detection
# TODO: if there's no date in the version string, look for one in copyright/trademark strings?
# TODO: can we assume Fontographer dates are always mm/dd/yy ?

# Misc TODOs:
# TODO: when comparing files, check filesizes aren't too enormous to read into memory!
# TODO: select the best available English-language entries from 'name' table, rather than the last ones specified?
# TODO: Add Type 1 support?
# TODO: Add bitmap .fon support?
# TODO: Add web font support?
# TODO: File unsupported types in '(unsupported)' or some such?

# Constants for entries in TrueType/OpenType 'name' table:
FS_COPYRIGHT      = 0
FS_FAMILY         = 1
FS_SUBFAMILY      = 2
FS_UID            = 3
FS_FULLNAME       = 4
FS_VERSION        = 5
FS_POSTSCRIPT     = 6
FS_TRADEMARK      = 7
FS_MANUFACTURER   = 8
FS_DESIGNER       = 9
FS_DESCRIPTION    = 10
FS_URL_VENDOR     = 11
FS_URL_DESIGNER   = 12
FS_LICENSE        = 13
FS_URL_LICENSE    = 14
FS_TYPO_FAMILY    = 16
FS_TYPO_SUBFAMILY = 17
FS_MACNAME        = 18
FS_SAMPLE         = 19
FS_PS_CID         = 20
FS_WWS_FAMILY     = 21
FS_WWS_SUBFAMILY  = 22
FS_LIGHT          = 23
FS_DARK           = 24
FS_PS_VAR         = 25

# List of font creators, to be used as folder names
# Where a list of synonyms is given, the folder will be named for the first entry

creators = [

	['Ænigma Fonts', 'ÆNIGMA FONTS', 'NIGMA FONTS'],

	['Ace Fonts', 'www.acefonts.com'],
	'Adobe',
	'Agfa',
	['Alan Carr', 'A. Carr', 'Remember to vote!'],
	'Allen R. Walden',
	'American Greetings Corporation',
	['Andreas Nylin', 'Andreas M. Nylin'],
	'Andrew Galarza',
	'Andy Krahling',
	'Antifa Publishing',
	['Apple Computer Inc.', 'Apple Computer Inc'],
	'Apostrophe',
	'Ascender',
	'Astigmatic One Eye',
	'Atech Software',
	'Autodesk',

	['Bay Animation Inc.', 'Bay Animation Inc'],
	'Bear Rock Technologies',
	['Ben Nathan', 'The Kaizer'],
	['Berthold', 'BERTHOLD AG'],
	'Bigelow & Holmes',
	'BitmapMania',
	'Bitstream',
	['Blambot', 'blambot.com'],
	['Blue Vinyl Fonts', 'Jess Latham'],
	'Brain Stew Fonts',
	'Brand Design Co.',
	'Brendel Informatik',
	'Brøderbund Software',
	'Buddha Graphix',

	'Callifonts',
	['Casady & Greene Inc.', 'Casady & Greene, Inc.'],
	'Claes Kallarsson',
	'Clearlight',
	'Comicraft',
	'Computer Support Corporation',
	'CompuWorks',
	['Corel Corporation', 'Corel Systems'],
	['Cosmi ', 'COSMI'],
	'Cosmonaut Fonts',
	['Craig Kroeger', 'craig kroeger'],

	'DarkSide Productions',
	'Dave Edwards Consulting',
	'Dieter Schumacher',
	['Digital Graphic Labs', 'Digital Graphics Labs'],
	'Digital Typeface Corp',
	'DigitalDreamDesign',
	['Divide By Zero', 'Dividy By Zero', 'Tom Murphy 7', 'vroomfonde/ttf'],
	['DustBust Fonts', 'dustBUST Fonts', 'Andreas Nylin'],
	['DynaLab Inc.', 'DynaLab Inc'],

	'Eastern Language Systems',
	['Elfring Fonts', 'Elfring Soft Fonts'],
	'ElseWare',
	'Emigre Graphics',
	'Erik Spiekermann',

	['Fantazia', 'Fantazia Concepts', 'Fantazia Fonts and Sounds'],
	['Fish Dicks Inc.', 'Fish Dicks, Inc', 'Fish Dicks', 'FishDicks Inc'],
	['Font Awesome', 'Fort Awesome'],
	'Font Diner',
	['Fontalicious', 'Font•a•licious'],
	'FontBank',
	'Fonts For Flash',
	'Fontware',
	['FreakyFonts', 'freakyfonts'],
	['FSI FontShop', 'fontstruct'],

	['Gary Bouton', 'BOUTON'],
	'GemFonts',
	'George Douros',
	['Gosub Communications', 'gosub communications'],

	'Hagilda',
	'Heather Daniels',
	'Heidelberger Druckmaschinen',
	'Hewlett-Packard',
	['HPLHS', 'Andrew Leman', 'Andrew H. Leman', 'E-phemera'],

	'Iconian Fonts',
	'Image Club Graphics',
	['ImageLine Inc.', 'ImageLine Inc'],
	['Inter-Mega', 'Inter Mega'],
	['ITC', 'International Typeface Corp'],

	["Jeff's Fonts & Dingbats", "Jeff's Dingbats & Fonts", 'Jeffrey N. Levine'],
	'Joe Gillespie',
	'John Martz',
	'Jos Buivenga',

	'Kinghorn Company',
	'Kludo Studio',

	['Larabie Fonts', 'Ray Larabie', 'larabiefonts', 'rlarabie@'],
	['Letraset', 'LETRASET'],
	['LettError','LettEror'],
	' Levi ',
	['Linotype', 'LINOTYPE'],
	['Lions Den International Inc.', 'Lions Den International, Inc'],
	[' LT ', 'trademark of the LT'],

	'MadCaps',
	'Magnus Högberg',
	['Maniackers Design', 'Masayuki Sato'],
	['Marc Misman', 'Miepsfonts', '-mieps-', '-Mieps-', 'Mr.Mieps'],
	['MarianFudge Design Studios', 'tommy cary', 'marianfudge'],
	'Martin Majoor',
	'Matt Perkins',
	['Matthew Bardram', 'SmartDust'],
	'Matthew Welch',
	'Microsoft',
	['Mike Hind', 'Stickfonts'],
	['Miles Inc.', 'Miles Corporation'],
	'Monotype',
	['Mr Fisk', 'MikeLarson', 'Mr.Fisk'],

	'Nate Piekos',
	'Neale Davidson',
	['Nick Curtis', "Nick's Fonts"],
	['Nico Hensel', 'nico hensel'],
	'Norbert Reiners',
	['NovelFonts! Corporation'],

	['Omega Font Labs', 'OMEGA Font Labs'],

	'P22',
	['Patrick Broderick', 'rotodesign'],
	'Payne Loving Trust',
	'pearlygates',
	['Pinhead Graphix', 'PINHEAD GRAF', 'Pinhead Graf'],
	'pixel-fonts.com',
	'Pixietype',
	['PizzaDude', 'pizzadude.dk', 'Jakob Fischer'],

	'Ray Larabie & Martin Archer',
	['Ramandhani Nugraha', 'ramandhani nugraha'],
	'Rev. Josh Wilhelm',
	'Richard A. Ware',
	['Ricoh', 'RICOH'],
	'Robert Schenk',

	'Sharkshock Productions',
	['ShyFonts', 'ShyWedge'],
	'Soft Horizons',
	'SoftKey Software',
	'SoftMaker Software',
	'Software Complement',
	'Southern Software',
	'Statica Productions',
	'StimulEye Fonts',
	'Superlooper',
	['SWFTE', 'Swfte'],

	'TarmSaft',
	'Tepid Monkey Fonts',
	['The Pixel Plant', 'thepixelplant.net'],
	'Theodore Rith Heng',
	'ToxiType',
	['Type Solutions Inc.', 'Type Solutions'],
	['Tyrone C', 'Empire of Hiva', 'Barefoot Midget'],

	'Uddi Uddi',
	'URW',
	['Utopiafonts', 'utopiafonts'],

	'Vapour Trail',
	'vFive Digital',

	['Weatherly Systems Inc.', 'Weatherly Systems Inc', 'WSI', 'W.S.I.'],
	['WhoAmI Design'],
	'WolfBainX',
	['WordPerfect Corporation', 'WordPerfect'],

	['Yasuhiro Yamaoka', 'YOFonts'],
	'Yuji Adachi',
	['Yuji Oshimoo', 'yuji oshimoo', '04.jp.org'],
	'Yuji Saiki',

	['Zeh Rorshack', 'zeh rorshack', 'zeh'],
	['Zone23', 'ZONE23'],

]




# List of formats to be recognised as dates, are converted to regex below
# d = dight, q = optional digit

dateformats = [
	'dq/dq/dddd',
	'dq-dq-dddd',
	'dq.dq.dddd',
	'dddd-dq-dq',
	'dq/dq/dd',
	'dq-qd-dd',
	'dq.dq.dd',
]

def fixdateformat(str):
	str = str.replace('d', r'\d')
	str = str.replace('q', r'\d?')
	str = str.replace('/', r'\/')
	str = str.replace('.', r'\.')
	return str

dateformats = list(map(fixdateformat, dateformats))

logfile = open('unknowns.txt', 'w', encoding='utf-8')

# See whether a font maker is in the list of known creators
def check_for_known_creator(maker, default):
	if maker == 'not included.':
		return ''
	for cr in creators:
		if type(cr) is list:
			for alt in cr:
				if alt in maker:
					return cr[0]
		else:
			if cr in maker:
				return cr
	return default

# Remove invalid characters from a filename component
def valid_filename(name):
	for char in '<>:"/\\|?*\0':
		name = name.replace(char, '-')
	return name.replace('  ', ' ').strip()

# Create a directory if it doesn't already exist
def ensure_dir_exists(dir):
	if not os.path.exists(dir):
		os.mkdir(dir)

# Get substrings that look like dates
def dates_from_string(str):
	found = []
	for df in dateformats:
		vdate = re.findall(df, str)
		if len(vdate):
			found = found + vdate
			for vd in vdate:
				str = str.replace(vd, '')
	return found



# Normalise date to dd-mm-yy(yy) format if possible
def normalise_date(dat):
	dat = dat.replace('/', '-')
	dat = dat.replace('.', '-')
	# split into three components
	dat = list(map(int, dat.split('-')))
	# if first is 0 or > 31, date is yy-mm-dd, swap first and third, done
	if dat[0] > 31 or dat[0] == 0:
		if dat[0] < 100:
			dat[0] = dat[0] + 1900
		if dat[0] < 1980:
			dat[0] = dat[0] + 100
		(dat[0],dat[2]) = (dat[2], dat[0])
	else:
		# if third is 0 or > 31, date is xx-xx-yy
		# if second is > 12, date is mm-dd-yy, swap first and second
		if dat[1] > 12 or dat[2] > 31 or dat[2] == 0:
			if dat[1] > 12:
				(dat[0], dat[1]) = (dat[1], dat[0])
			if dat[2] < 100:
				dat[2] = dat[2] + 1900
			if dat[2] < 1980:
				dat[2] = dat[2] + 100
	# and stringify
	for i in range(0,3):
		if dat[i] > 99:
			dat[i] = str(dat[i])
		else:
			dat[i] = str(dat[i]).zfill(2)
	return '-'.join(dat)

# Reformat a font version string into version number and/or date
def version_from_string(vers):
	# Strip software versions
	vers = re.sub('Fontographer 4.1J [\d\.]*', '', vers)
	vers = re.sub('Fontographer [\d\.]*', '', vers)
	vers = re.sub('Converted from .*? by ALLTYPE', '', vers)
	vers = re.sub('Fontlab V[\d\.]*', '', vers)
	vers = re.sub('makeotf\.lib\.[\d\.]*', '', vers)
	# Look for date
	vdates = dates_from_string(vers)
	for vd in vdates:
		vers = vers.replace(vd, '')
	if len(vdates):
		vdate = normalise_date(vdates[0])
	else:
		vdate = ''
	# Look for potential version numbers
	vnums = re.findall('\d[\d.]*', vers)
	# See if any of them looks like a year
	year = ''
	currentyear = int(time.ctime()[-4:])
	while (len(vnums) and len(vnums[0]) == 4 and vnums[0].isnumeric()
	       and int(vnums[0]) > 1990 and int(vnums[0]) <= currentyear):
		year = vnums[0]
		del vnums[0]
	if vdate == '':
		vdate = year
	if len(vnums):
		vnum = vnums[0]
	else:
		vnum = ''
	if len(vnum):
		if len(vdate):
			return ' (v' + vnum + ', ' + vdate + ')'
		else:
			return ' (v' + vnum + ')'
	else:
		if len(vdate):
			return ' (' + vdate + ')'
		else:
			return ''

# Compare two files by size and contents
def files_same(file1, file2):
	# compare sizes first, it's quicker than hashing
	if os.path.getsize(file1) != os.path.getsize(file2):
		return False
	# hash first file
	hasher = hashlib.md5()
	fp1 = open(file1, 'rb')
	buf = fp1.read()
	hasher.update(buf)
	hash1 = hasher.hexdigest()
	fp1.close()
	# hash second file
	hasher = hashlib.md5()
	fp2 = open(file2, 'rb')
	buf = fp2.read()
	hasher.update(buf)
	hash2 = hasher.hexdigest()
	fp2.close()
	if hash1 == hash2:
		return True
	return False

# Returns a full filename that won't clash with oldfile
# If new file and oldfile have same content, returns false
def pick_name_for(oldfile, newdir, newname, newext):
	suffix = 1
	tryname = newname.strip()
	while os.path.exists(newdir + tryname + newext):
		if files_same(oldfile, newdir + tryname + newext):
			return False
		else:
			tryname = newname + ' (' + str(suffix) + ')'
			suffix = suffix + 1
	return newdir + tryname + newext

def process_font(file):

	print('\n' + file)

	# Get records from the 'name' table
	font = ttLib.TTFont(file)
	table = [None] * 26
	for record in font['name'].names:
		if record.nameID < 26:
			table[record.nameID] = str(record)
			if record.nameID not in [FS_DESCRIPTION, FS_LICENSE]:
				print(str(record.nameID) + ': ' + str(record))

	# Get the font name
	fullname = table[FS_FULLNAME] or ''
	fullname = fullname.replace('  ', ' ').replace('  ', ' ').strip()

	# Try and extract a useful version number and/or date
	version = table[FS_VERSION] or ''
	version = version_from_string(version)

	# Now we try to get the name of the font maker
	# If there's a manufacturer specified, we'll use that, otherwise...
	# If there's a recognised creator in the trademark or copyright, we'll use that, otherwise...
	# If there's a designer specified, we'll use that, otherwise...
	# We'll file it under '(unknown)'
	# Get company name, check against known creators, or leave as-is
	manufacturer = table[FS_MANUFACTURER] or ''
	manufacturer = check_for_known_creator(manufacturer, manufacturer)
	# Get designer, check against known creators, or leave as-is
	designer = table[FS_DESIGNER] or ''
	designer = check_for_known_creator(designer, designer)
	# Get copyright & trademark, check against known creators, or discard
	copyright = table[FS_COPYRIGHT] or ''
	trademark = table[FS_TRADEMARK] or ''
	ip = check_for_known_creator(copyright + ' ' + trademark, '')
	# Take maker name from manufacturer, copyright/trademark, or designer, in that order
	maker = manufacturer or ip or designer or '(unknown)'
	maker = maker.strip()

	# Get a new filename that doesn't already exist
	newdir = destination + valid_filename(maker) + '/'
	newext = os.path.splitext(filename)[1].lower()
	newfilename = valid_filename(fullname + version)
	copyto = pick_name_for(file, newdir, newfilename, newext)

	# Copy file to destination, if we don't already have it
	if copyto:
		print(copyto)
		ensure_dir_exists(newdir)
		shutil.copyfile(file, copyto)
	else:
		print('Already got identical', newfilename)
	# os.remove(file)

	if maker == '(unknown)':
		if copyright or trademark:
			logfile.write(copyright + ' ; ' + trademark + '\n')

# Process all fonts in the source directory tree
for root, dirs, files in os.walk(source):
	for filename in files:
		ext = os.path.splitext(filename)[1].lower()[1:]
		if ext == 'ttf' or ext == 'otf':
			process_font(os.path.join(root, filename))

logfile.close()

